// Code generated by MockGen. DO NOT EDIT.
// Source: ./fetch.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/fetch/mock_fetch.go -source=./fetch.go
//

// Package mock_fetch is a generated GoMock package.
package mock_fetch

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDocumentIDFetcher is a mock of DocumentIDFetcher interface.
type MockDocumentIDFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentIDFetcherMockRecorder
}

// MockDocumentIDFetcherMockRecorder is the mock recorder for MockDocumentIDFetcher.
type MockDocumentIDFetcherMockRecorder struct {
	mock *MockDocumentIDFetcher
}

// NewMockDocumentIDFetcher creates a new mock instance.
func NewMockDocumentIDFetcher(ctrl *gomock.Controller) *MockDocumentIDFetcher {
	mock := &MockDocumentIDFetcher{ctrl: ctrl}
	mock.recorder = &MockDocumentIDFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentIDFetcher) EXPECT() *MockDocumentIDFetcherMockRecorder {
	return m.recorder
}

// FetchEncryptedDiagram mocks base method.
func (m *MockDocumentIDFetcher) FetchEncryptedDiagram(documentID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEncryptedDiagram", documentID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEncryptedDiagram indicates an expected call of FetchEncryptedDiagram.
func (mr *MockDocumentIDFetcherMockRecorder) FetchEncryptedDiagram(documentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEncryptedDiagram", reflect.TypeOf((*MockDocumentIDFetcher)(nil).FetchEncryptedDiagram), documentID)
}
